"bully_inv", "bis1_total", #fill = "bully_inv_rev",# facet.by = "q3_a", #fill="bully_3group_rev",
xlab = "Bullying Involvement", ylab = "Barret Impulsiveness Scale   ",
outlier.size=0.8, title = "D.")
fig_k <-  a_bis +
stat_compare_means(comparisons = my_comparison,
tip.length = 0.015,
symnum.args =list(cutpoints =
c(0, 0.001, 0.01, 0.05, 0.10, 1),
symbols = c("p <0.001", "p<0.01", "p<0.05", "p<0.1", "ns")
),
label.y = c(81, 82.5, 84,91),
size=3
)+
expand_limits(y=c(10,100))+
# stat_compare_means(method= "anova",label.y = 93, size=3.5,
#                   symnum.args =list(cutpoints =
#                                      c(0, 0.001, 0.01, 0.05, 0.10, 1),
#                                   symbols = c( "p<0.001", "p<0.01", "p<0.05", "p<0.1", "ns")
#                                  )
#               )+
scale_x_discrete( name= "Type of Bullying Involvement",
limits = levels(dataset$bully_inv),
labels=c(
"Not Involved", "Pure Victims" ,"Bully-Victims","Pure Bullies" )
)+
theme(text=element_text(size=8),axis.text.x  = element_text(size=7),axis.title.y = element_text(size=7))+
scale_y_continuous(name = "Impulsivity")
# bullying perpetration: independent variable: victims; dependent variables: bully-perpetrator
a <- as.data.frame.table(table(dataset$bully_3group, dataset$victim_3group))
a<-plyr::rename(a, replace= c("Var1"= "bully_3group", "Var2"= "victim_3group","Freq"="count"))
a <- mutate(a, n_count= paste0("n = ", count))
b<- as.data.frame.table(table(dataset$victim_3group))
b<-plyr::rename(b, replace= c("Var1"= "victim_3group","Freq"="counts"))
b <- mutate(b, n_counts= paste0("total n= ", counts))
victim_3group <-  ggplot(data=dataset, aes(x=victim_3group))+
geom_bar(aes(fill=fct_rev(bully_3group), x=victim_3group), position="fill")+
geom_text_repel(data=a, aes(x=victim_3group,
label=n_count,
y=count ),
size=3,vjust = 1.2, position="fill",
direction = "x", force=0.01, segment.alpha = 0)+
geom_text(data=b, aes(x=victim_3group, label=paste(n_counts,
"( ",round(100*counts/733, digit = 1),"%",")",sep = ""
),
y=counts),
size=3,
vjust=-0.3,
position="fill")+
labs(title = "B.")+
scale_x_discrete( labels = c("v0_not_being_bullied" = "Never being victimized","v1_1or2_times" = "Once or twice",
"v2_repeated_being_bullied" = "Moderate"))+
scale_fill_discrete(name = "Bullying Perpetration",
labels = c( "Moderate", "Once or twice","Never"))+
expand_limits(y=1.05, by=0.25)+
xlab("Bullying Victimization")+ylab("Relative Proportion")+
theme_pubr(base_size = 8)+
theme(text = element_text(size=8), axis.title.y = element_text(size=7), axis.text.x = element_text(size=7),
legend.position = "right")
##
a_bis <-  ggboxplot(data=dataset_selected,
"bully_3group", "bis1_total", fill="bully_3group_rev", facet.by = c("victim_3group"), #fill="bully_3group_rev",
xlab = "Bullying Perpetration", ylab = "Barret Impulsiveness Scale",
panel.labs = list(victim_3group=c("Victimization: Never","Victimization: Once or twice", "Victimization: Moderate")),
outlier.size=0.8, title = "E."
)
fig_1_b <-  a_bis +
stat_compare_means(comparisons = my_comparison,
tip.length = 0.015,aes(label = paste0(..method..,"p =", ..p.format..)),
method = "t.test",
#symnum.args =list(cutpoints =
#                   c(0, 0.001, 0.01, 0.05, 0.10, 1),
#                symbols = c("p <0.001", "p<0.01", "p<0.05", "p<0.1", "ns")
# ),
label.y = c(86.5, 83.5, 81),
size=3
)+
stat_compare_means(method= "anova",label.y = 91, size=3.5
)+
scale_x_discrete( name= "Bullying Perpetration",
limits = levels(dataset$bully_3group),
labels=c(
"Never", "Once or twice" ,"Moderate"
) )+
theme(text = element_text(size=8),axis.text.x  = element_text(size=7),axis.title.y = element_text(size=7))+
scale_y_continuous(name = " Impulsivity")+
theme_pubr(base_size = 8)
##
fig_1_b <- fig_1_b+rremove("legend")
victim_3group_revised <- victim_3group+rremove("legend")
lgd <-  as_ggplot( get_legend(victim_3group))
plotlist <- list(#bully_inv_more,
victim_3group_revised,
l[[1]],l[[2]], l[[3]],
l[[4]],l[[6]], l[[9]],
fig_k, fig_1_b, lgd, lgd)
layout.m <- rbind(
c(1,1,1,10),
c(2,3,4,NA),
c(5,6,7,NA),
c(8,8,8,NA),
c(9,9,9,11)
)
gridExtra::grid.arrange(grobs=plotlist, layout_matrix= layout.m)
install.packages("ppsr")
devtools::install_github('https://github.com/paulvanderlaken/ppsr')
install.packages('devtools')
devtools::install_github('https://github.com/paulvanderlaken/ppsr')
install.packages("devtools")
install.packages("devtools")
devtools::install_github('https://github.com/paulvanderlaken/ppsr')
library(ppsr)
ppsr::score_matrix(model1.imp$data)
ppsr::score_matrix(model1.imp$data[,1:14])
k <- ppsr::score_matrix(model1.imp$data[,1:2])
load("~/GitHub/bully_inv/2021bullying.RData")
load("2021bullying.RData")
fig.5
plot.s.all
fig.2 <- annotate_figure(
plot.s.all, top = text_grob("Calibration plot: before and after bootstrap-resampling bias correction",
face = "plain", size = 12, hjust=0.45, vjust = 0.27),
fig.lab = "Figure 2", fig.lab.face = "plain",
fig.lab.size = 12, fig.lab.pos= "top.left"
)
library(esc)
library(tidyverse)
library(brglm2)
library("rms")
library(ggpubr)
library("pROC")
library(caret)
library(mice)
library(glmnet)
library(e1071)
library(randomForest)
library(kknn)
library(mgcv)
library(rms)
library(Information)
fig.2 <- annotate_figure(
plot.s.all, top = text_grob("Calibration plot: before and after bootstrap-resampling bias correction",
face = "plain", size = 12, hjust=0.45, vjust = 0.27),
fig.lab = "Figure 2", fig.lab.face = "plain",
fig.lab.size = 12, fig.lab.pos= "top.left"
)
fig.2
plot_calibration_c <-   function (data1, cOutcome, predRisk, groups, rangeaxis, plottitle,
xlabel, ylabel, filename, fileplot, plottype, span=1
)
{
if (missing(groups)) {
groups <- 10
}
#if (missing(plottitle)) {
# plottitle <- "Calibration Plot"
#}
if (missing(xlabel)) {
xlabel <- "Predicted Probability"
}
if (missing(ylabel)) {
ylabel <- "Observed/Actual Probability"
}
if (missing(rangeaxis)) {
rangeaxis <- c(0, 1)
}
p = predRisk
y = data1[, cOutcome]
if (length(unique(y)) != 2) {
stop(" The specified outcome is not a binary variable.\n")
}
else {
matres <- matrix(NA, nrow = groups, ncol = 5)
sor <- order(p)
p <- p[sor]
y <- y[sor]
groep <- cut2(p, g = groups)
total <- tapply(y, groep, length)
predicted <- round(tapply(p, groep, sum), 3)
observed <- tapply(y, groep, sum)
meanpred <- round(tapply(p, groep, mean), 3)
meanobs <- round(tapply(y, groep, mean), 3)
matres <- cbind(total, meanpred, meanobs, predicted,
observed
#bias= ifelse(meanpred>meanobs, "overestimated", "underestimated")
)
matres <- as.data.frame(matres)
matres <- mutate(matres, bias= ifelse(meanpred>meanobs, "overestimated", "underestimated"))
matres <- mutate(matres, Type= "Grouped observations")
#matres[bias] <- factor(matres[,bias], levels = c("overestimated", "underestimated"))
plotc <-  ggplot(data =matres )+  #geom_smooth(aes(x= meanpred, y=meanobs), span= span)+
geom_point(aes(x= meanpred, y=meanobs, shape= Type #,col=bias
)
)+
xlab(xlabel)+ylab(ylabel) +annotate("segment", x=0, xend = 1, y=0, yend=1)+
xlim(c(0,1))+ylim(c(0,1)) + theme_pubr(base_size = 14)+ grids(axis = "xy")
}
return(plotc)
}
plot.mypaper <- function(x ,testdata=NULL , correct=F, method="glm",OOB=T, k=25,groups=NULL, boot=NULL,font_size=14, ...
# must.have.var=c("firstrses_standardized")
)
{
corrected.c <- NULL
predicted_pro_2 <- NULL
if(is.null(testdata)){
data1=x$data
predicted <- predicted.mypaper(x, method = method)
print("internal validation and calibration")
}else{
data1=testdata
predicted <- predicted.mypaper(x,  testdata = testdata, correct=correct, method = method, OOB=OOB, k=k)
print("external validation and calibration of testdata with prevalence correction")
}
model <- x$model$GLM
model.lrm <-  x$model$LRM
y <- predicted$Observed
p <- predicted$Predicted
dep_var <- x$dep_var
data1<-mutate(data1, dep_var_0 = y)
# specify range of x-axis and y-axis
rangeaxis <- c(0,1)
# specify number of groups for Hosmer-Lemeshow test
cOutcome <- match(as.character(quote(dep_var_0)), names(data1))
if(is.null(groups)){groups= x$group}
# Calibration plot#
plot1 <-  plot_calibration_c(data1=data1, plottitle = plottitle,#%>%filter(!is.na(q5_a)), #  如果model_1含q5_a, 要把dataset_selected 中q5_a==NA去掉
#  因為model也去掉了q5_a==NA...
cOutcome=cOutcome,  # firstyrbully_1or0 是 dataset_selected[,3]
predRisk=p,
groups=groups, rangeaxis=rangeaxis, span=x$span
)
if(is.null(boot)){boot= x$validate.boot40}
if(boot ){
cal<- NULL
# bootstrap-corrected calibration
cal <- rms::calibrate(model.lrm , #predy = c(seq(0, 1, by = 0.01)),
method="boot", B=x$val.B) # usually B=200 or 300
cal.attr <- attributes(cal)
predicted <- cal.attr$predicted
p <- cal[, "predy"]
p.app <- cal[, "calibrated.orig"]
p.cal <- cal[, "calibrated.corrected"]
if (length(predicted)) {
s <- !is.na(p + p.cal)
err <- predicted - approx(p[s], p.cal[s], xout = predicted,
ties = mean)$y
cat("\nn=", n <- length(err), "   Mean absolute error=",
round(mae <- mean(abs(err), na.rm = TRUE), 3), "   Mean squared error=",
round(mean(err^2, na.rm = TRUE), 5), "\n0.9 Quantile of absolute error=",
round(quantile(abs(err), 0.9, na.rm = TRUE), 3),
"\n\n", sep = "")
# if (subtitles)
#  title(sub = paste("Mean absolute error=", round(mae,
#                                                 3), " n=", n, sep = ""), cex.sub = cex.subtitles,
#      adj = 1)
}
cal.attr.df <- data.frame(predy=cal.attr$predicted)
cal.df <- as.data.frame( unclass(cal))
#cal.df$ideal <-cal.df$predy
cal.df.gather <- gather(data=cal.df, key="Type", value="Predicted_Probability",  calibrated.orig,
calibrated.corrected)
###
plot1 <- plot1+
geom_line(data= cal.df.gather,   aes(x=predy, y=Predicted_Probability, col = Type), size=1.1)+
geom_rug(data=cal.attr.df,  aes(x= predy), stat = "identity",
position = "identity",alpha=0.2, sides = "t") +
scale_shape_discrete(name=" ",  labels=paste("Grouped/Actual observations\n(", x$group, "groups)"),
)+
scale_color_discrete(name=" ",
breaks= c("calibrated.orig", "calibrated.corrected"),
labels= c("Apparent", paste("Bias-corrected\n(Bootstrap repetition = ",
x$val.B,
")",
sep = "")
)
)+
theme_bw(base_size = font_size)
}
# calibration.auc <<- list(calibration.auc, optimism.corrected.c=corrected.c)
return(plot1)
}
plot1.s <- plot(model1.s)
plot3.s <- plot(model3.s)
plot1.s
plot(model3.s, font_size = 16)
plot(model3.s, font_size = 20)
plot1.s <- plot(model1.s, font_size = 20)
#plot2.s <- plot(model2.s)
plot3.s <- plot(model3.s, font_size = 20)
plot.s.all <- ggarrange(
plot1.s,plot3.s,
labels = c(
"1.", "2."
),label.y = 1.015, legend = "right", common.legend = T, nrow = 1,
font.label = list(size=12, face="plain")
)
plot.s.all
plot1.s <- plot(model1.s, font_size = 18)
#plot2.s <- plot(model2.s)
plot3.s <- plot(model3.s, font_size = 18)
plot.s.all <- ggarrange(
plot1.s,plot3.s,
labels = c(
"1.", "2."
),label.y = 1.015, legend = "right", common.legend = T, nrow = 1,
font.label = list(size=12, face="plain")
)
fig.2 <- annotate_figure(
plot.s.all, top = text_grob("Calibration plot: before and after bootstrap-resampling bias correction",
face = "plain", size = 12, hjust=0.45, vjust = 0.27),
fig.lab = "Figure 2", fig.lab.face = "plain",
fig.lab.size = 12, fig.lab.pos= "top.left"
)
fig.2
plot.s.all <- ggarrange(
plot1.s,plot3.s,
labels = c(
"1.", "2."
),label.y = 1.015, legend = "right", common.legend = T, nrow = 1,
font.label = list(size=14, face="plain")
)
fig.2 <- annotate_figure(
plot.s.all, top = text_grob("Calibration plot: before and after bootstrap-resampling bias correction",
face = "plain", size = 12, hjust=0.45, vjust = 0.27),
fig.lab = "Figure 2", fig.lab.face = "plain",
fig.lab.size = 14, fig.lab.pos= "top.left"
)
fig.2
plot.s.all <- ggarrange(
plot1.s,plot3.s,
labels = c(
"1.", "2."
),label.y = 1.015, legend = "right", common.legend = T, nrow = 1,
font.label = list(size=18, face="plain")
)
fig.2 <- annotate_figure(
plot.s.all, top = text_grob("Calibration plot: before and after bootstrap-resampling bias correction",
face = "plain", size = 12, hjust=0.45, vjust = 0.27),
fig.lab = "Figure 2", fig.lab.face = "plain",
fig.lab.size = 18, fig.lab.pos= "top.left"
)
fig.2
fig.2 <- annotate_figure(
plot.s.all, top = text_grob("Calibration plot: before and after bootstrap-resampling bias correction",
face = "plain", size = 18, hjust=0.45, vjust = 0.27),
fig.lab = "Figure 2", fig.lab.face = "plain",
fig.lab.size = 18, fig.lab.pos= "top.left"
)
fig.2
plot1.s <- plot(model1.s, font_size = 20)
#plot2.s <- plot(model2.s)
plot3.s <- plot(model3.s, font_size = 20)
plot.s.all <- ggarrange(
plot1.s,plot3.s,
labels = c(
"1.", "2."
),label.y = 1.015, legend = "right", common.legend = T, nrow = 1,
font.label = list(size=20, face="plain")
)
fig.2 <- annotate_figure(
plot.s.all, top = text_grob("Calibration plot: before and after bootstrap-resampling bias correction",
face = "plain", size = 20, hjust=0.45, vjust = 0.27),
fig.lab = "Figure 2", fig.lab.face = "plain",
fig.lab.size = 20, fig.lab.pos= "top.left"
)
fig.2
size=19
plot1.s <- plot(model1.s, font_size = size)
#plot2.s <- plot(model2.s)
plot3.s <- plot(model3.s, font_size = size)
plot.s.all <- ggarrange(
plot1.s,plot3.s,
labels = c(
"1.", "2."
),label.y = 1.015, legend = "right", common.legend = T, nrow = 1,
font.label = list(size=size, face="plain")
)
fig.2 <- annotate_figure(
plot.s.all, top = text_grob("Calibration plot: before and after bootstrap-resampling bias correction",
face = "plain", size = size, hjust=0.45, vjust = 0.27),
fig.lab = "Figure 2", fig.lab.face = "plain",
fig.lab.size = size, fig.lab.pos= "top.left"
)
fig.2
bsi3sum$bsi
bsisum <- function(bsi=bsi1){
bsisum <-summary(bsi)
estimate <- data.frame(t(bsisum$var.coefs$'tau='))
modelfrq <- data.frame(bsisum$model.rel.frequencies)
colnames(modelfrq) <- c("model", "Freq")
BIFtau <- data.frame(t(bsisum$var.rel.frequencies))
BIF <- BIFtau[,1]
names(BIF)<- rownames(BIFtau)
bsisum <- cbind(BIF, estimate)
bsisum <- list(bsi= bsisum[order(bsisum$BIF, decreasing = T),][,c(1,2,3,4,6,5)],
modelfrq=modelfrq)
bsisum$bsi$Relative.Cond..Bias <-  0.01*bsisum$bsi$Relative.Cond..Bias
bsisum$bsi <- round(bsisum$bsi, digits = 3)
return(bsisum)
}
bsi1sum <- bsisum(bsi1)
bsi2sum <- bsisum(bsi2)
bsi3sum <- bsisum(bsi3)
debugonce(bsisum)
bsi1sum <- bsisum(bsi1)
e <- data.frame(t(bsi1$var.coefs$"tau=")
)
bsitest <-summary(bsi1)
e <- data.frame(t(bsitest$var.coefs$"tau=")
)
View(bsitest)
class(bsitest)
e <- data.frame(t(bsi1$var.coefs)
)
e <- data.frame(t(bsi1$var.coefs$tau)
)
e <- bsi1$var.coefs
View(e)
class(e)
e <- data.frame(t(bsitest$var.coefs$"tau="))
bsitest$Var.coefs
View(bsitest)
bsisum <- function(bsi=bsi1){
bsisum <-summary(bsi)
estimate <- data.frame(t(bsisum$var.coefs$'tau='))
modelfrq <- data.frame(bsisum$model.rel.frequencies)
colnames(modelfrq) <- c("model", "Freq")
BIFtau <- data.frame(t(bsisum$var.rel.frequencies))
BIF <- BIFtau[,1]
names(BIF)<- rownames(BIFtau)
bsisum <- cbind(BIF, estimate)
bsisum <- list(bsi= bsisum[order(bsisum$BIF, decreasing = T),][,c(1,2,3,4,6,5)],
modelfrq=modelfrq)
bsisum$bsi$Relative.Cond..Bias <-  0.01*bsisum$bsi$Relative.Cond..Bias
bsisum$bsi <- round(bsisum$bsi, digits = 3)
return(bsisum)
}
k <- summary(bsi1)
k
bsi1sum
bsi1
bsi1$tau
k <- summary(bsi1)
k
k <- coef(bsi1)
k
k <- bsisum(bsi1)
bsi1$num.boot
bsisum <- function(bsi=bsi1){
bsisum <-summary.abe(bsi)
estimate <- data.frame(t(bsisum$var.coefs$'tau='))
modelfrq <- data.frame(bsisum$model.rel.frequencies)
colnames(modelfrq) <- c("model", "Freq")
BIFtau <- data.frame(t(bsisum$var.rel.frequencies))
BIF <- BIFtau[,1]
names(BIF)<- rownames(BIFtau)
bsisum <- cbind(BIF, estimate)
bsisum <- list(bsi= bsisum[order(bsisum$BIF, decreasing = T),][,c(1,2,3,4,6,5)],
modelfrq=modelfrq)
bsisum$bsi$Relative.Cond..Bias <-  0.01*bsisum$bsi$Relative.Cond..Bias
bsisum$bsi <- round(bsisum$bsi, digits = 3)
return(bsisum)
}
k <- bsisum(bsi1)
abe::summary.abe()
bsisum <- function(bsi=bsi1){
bsisum <-abe::summary.abe(bsi)
estimate <- data.frame(t(bsisum$var.coefs$'tau='))
modelfrq <- data.frame(bsisum$model.rel.frequencies)
colnames(modelfrq) <- c("model", "Freq")
BIFtau <- data.frame(t(bsisum$var.rel.frequencies))
BIF <- BIFtau[,1]
names(BIF)<- rownames(BIFtau)
bsisum <- cbind(BIF, estimate)
bsisum <- list(bsi= bsisum[order(bsisum$BIF, decreasing = T),][,c(1,2,3,4,6,5)],
modelfrq=modelfrq)
bsisum$bsi$Relative.Cond..Bias <-  0.01*bsisum$bsi$Relative.Cond..Bias
bsisum$bsi <- round(bsisum$bsi, digits = 3)
return(bsisum)
}
bsi1sum <- bsisum(bsi1)
bsi1sum
bsi1sum$bsi
write.table(bsi1sum$bsi, "bsiabe1.csv",sep = ",")
abe1 <-  abe.boot(model1.imp$model$global_model, data = model1.imp$data, exact = T, type.factor = "factor" )
abe1 <-  abe::abe(model1.imp$model$global_model, data = model1.imp$data, exact = T, type.factor = "factor" )
abe1 <-  abe::abe(model1.imp$model$global_model, traindata = model1.imp$data, exact = T, type.factor = "factor" )
model1.imp$model$global_model
abe1 <-  abe::abe(model1.imp$model$global_model,  exact = T, type.factor = "factor" )
abe1 <-  abe::abe(model1.imp$model$global_model, data = model1.imp$data )
abe1 <-  abe::abe(model1.imp$model$global_model, data = model1.imp$data, exact = T, type.factor = "factor" )
abe1 <-  abe::abe(model1.imp$model$global_model, data = data.frame(model1.imp$data), exact = T, type.factor = "factor" )
debugonce(abe::abe)
abe1 <-  abe::abe(model1.imp$model$global_model, data = data.frame(model1.imp$data), exact = T, type.factor = "factor" )
debugonce(abe::abe)
abe1 <-  abe::abe(model1.imp$model$global_model, data = data.frame(model1.imp$data), exact = T, type.factor = "factor" )
Q
debugonce(abe::abe)
abe1 <-  abe::abe(model1.imp$model$global_model, data = data.frame(model1.imp$data), exact = T, type.factor = "factor" )
abe1 <-  abe::abe(model1.imp$model$global_model, data = model1.imp$data[1:13], exact = T, type.factor = "factor" )
abe1 <-  abe::abe(model1.imp$model$global_model, data = model1.imp$data[,1:13], exact = T, type.factor = "factor" )
abe1 <-  abe::abe(model1.imp$model$global_model, data = model1.imp$data[,1:1], exact = T, type.factor = "factor" )
abe1 <-  abe::abe(model1.imp$model$global_model, data = model1.imp$data[,1:2], exact = T, type.factor = "factor" )
abe1 <-  abe::abe(model1.imp$model$global_model, data = model1.imp$data[,1:16], exact = T, type.factor = "factor" )
abe1 <-  abe::abe(model1.imp$model$global_model, data = model1.imp$data, exact = T, type.factor = "factor" )
abe1 <-  abe::abe(model1.imp$model$global_model, data = NULL, exact = T, type.factor = "factor" )
abe1 <-  abe::abe(model1.imp$model$global_model, data = dataset, exact = T, type.factor = "factor" )
abe1 <-  abe::abe(model1.imp$model$GLM, data = model1.imp$data, exact = T, type.factor = "factor" )
abe1 <-  abe::abe(model1.imp$model$LRM, data = model1.imp$data, exact = T, type.factor = "factor" )
abe1 <-  abe::abe(model1.imp$model$global_model, data = model1.imp$data, exact = T, type.factor = "factor" )
traindata <- model1.imp$data
abe1 <-  abe::abe(model1.imp$model$global_model, data = model1.imp$data, exact = T, type.factor = "factor" )
