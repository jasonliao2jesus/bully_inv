calibrated.corrected)
###
plot1 <- plot1+
geom_line(data= cal.df.gather,   aes(x=predy, y=Predicted_Probability, col = Type), size=1.1)+
geom_rug(data=cal.attr.df, mapping = aes(x= predy), stat = "identity",
position = "identity",alpha=0.2, sides = "t") +
scale_shape_discrete(name=" ")+
scale_color_discrete(name=" ",
breaks= c("calibrated.orig", "calibrated.corrected"),
labels= c("Apparent", "Bias-corrected"))
}
# calibration.auc <<- list(calibration.auc, optimism.corrected.c=corrected.c)
return(plot1)
}
plot.mypaper(model2.imp)
## predicting models: model and model 2.  missing data: imputated
set.seed(125)
span=0.8
group= 20
validate.boot40= T
val.B= 200
confusion.matrix= T
p.threshhold= 0.05
imputation=T
cut.off=0.5
correct= F
firstyrbully21_arg <-list(ind_var=vars_vector_victim, dep_var = "firstyrbully2", additional_var= add_vector,  data=dataset,  # additional_var 加上其他變數
imputation.mis.data=imputation,
span=span, group=group,
validate.boot40= validate.boot40,
val.B=val.B,
confusion.matrix= confusion.matrix,
cut.off=cut.off,
p.threshhold= p.threshhold,
correct= correct)
firstyrbully22_arg <-list(ind_var=vars_vector_victim_act, dep_var = "firstyr_bully2_act",additional_var= add_vector, data=dataset,
imputation.mis.data=imputation,
span=span, group=group,
validate.boot40= validate.boot40,
val.B=val.B,
confusion.matrix= confusion.matrix,
cut.off=cut.off,
p.threshhold= p.threshhold,
correct= correct)
rec_b1_arg <- list(ind_var=vars_vector_victim, dep_var = "rec_bully_firstyr", additional_var= add_vector, data= dataset,
imputation.mis.data=imputation,
span=span, group=group,
validate.boot40= validate.boot40,
val.B=val.B,
confusion.matrix= confusion.matrix,
cut.off=cut.off,
p.threshhold= p.threshhold,
correct= correct)
model1.imp <- do.call(mypaper, firstyrbully21_arg)
model3.imp<- do.call(mypaper, firstyrbully22_arg)
model2.imp <-  do.call(mypaper,rec_b1_arg)
plot2.imp <- plot.mypaper(model2.imp)
plot2.imp
model2.imp$model$LRM
data.test$dep_var_0
table(data.test$dep_var_0)
cal_rec
cal.attr <- attributes(cal_rec)
cal.attr.df <- data.frame(predy=cal.attr$predicted)
cal.df <- as.data.frame( unclass(cal_rec))
cal.df$ideal <-cal.df$predy
cal.df.gather <- gather(data=cal.df, key="Type", value="Predicted_Probability",  calibrated.orig,
calibrated.corrected)
plot1 <- plot1+
geom_line(data= cal.df.gather,   aes(x=predy, y=Predicted_Probability, col = Type), size=1.1)+
geom_rug(data=cal.attr.df, mapping = aes(x= predy), stat = "identity",
position = "identity",alpha=0.2, sides = "t") +
scale_shape_discrete(name=" ")+
scale_color_discrete(name=" ",
breaks= c("calibrated.orig", "calibrated.corrected"),
labels= c("Apparent", "Bias-corrected"))
plot1
model2.imp$validate.boot40
plot.mypaper <- function(x ,testdata=NULL , correct=T, ...
# must.have.var=c("firstrses_standardized")
)
{
corrected.c <- NULL
predicted_pro_2 <- NULL
if(is.null(testdata)){
data1=x$data
predicted <- predicted.mypaper(x)
print("internal validation and calibration")
}else{
data1=testdata
predicted <- predicted.mypaper(x, testdata = testdata, correct=correct)
print("external validation and calibration of testdata with prevalence correction")
}
model <- x$model$GLM
model.lrm <-  x$model$LRM
y <- predicted$Observed
p <- predicted$Predicted
dep_var <- x$dep_var
data1<-mutate(data1, dep_var_0 = y)
# specify range of x-axis and y-axis
rangeaxis <- c(0,1)
# specify number of groups for Hosmer-Lemeshow test
groups=x$group
cOutcome <- match(as.character(quote(dep_var_0)), names(data1))
plot1 <- NULL
cal <- NULL
# Calibration plot#
plot1 <-  plot_calibration_c(data1=data1, plottitle = plottitle,#%>%filter(!is.na(q5_a)), #  如果model_1含q5_a, 要把dataset_selected 中q5_a==NA去掉
#  因為model也去掉了q5_a==NA...
cOutcome=cOutcome,  # firstyrbully_1or0 是 dataset_selected[,3]
predRisk=p,
groups=x$group, rangeaxis=rangeaxis, span=x$span
)
if(validate.boot40 ){
# bootstrap-corrected calibration
cal <- calibrate(model.lrm , #predy = c(seq(0, 1, by = 0.01)),
method="boot", B=x$val.B) # usually B=200 or 300
cal.attr <- attributes(cal)
cal.attr.df <- data.frame(predy=cal.attr$predicted)
cal.df <- as.data.frame( unclass(cal))
cal.df$ideal <-cal.df$predy
cal.df.gather <- gather(data=cal.df, key="Type", value="Predicted_Probability",  calibrated.orig,
calibrated.corrected)
###
plot1 <- plot1+
geom_line(data= cal.df.gather,   aes(x=predy, y=Predicted_Probability, col = Type), size=1.1)+
geom_rug(data=cal.attr.df, mapping = aes(x= predy), stat = "identity",
position = "identity",alpha=0.2, sides = "t") +
scale_shape_discrete(name=" ")+
scale_color_discrete(name=" ",
breaks= c("calibrated.orig", "calibrated.corrected"),
labels= c("Apparent", "Bias-corrected"))
}
# calibration.auc <<- list(calibration.auc, optimism.corrected.c=corrected.c)
return(plot1)
}
plot2.imp <- plot.mypaper(model2.imp)
plot2.imp
model2.imp$model$LRM
cal.df <- as.data.frame( unclass(cal_rec))
cal.df$ideal <-cal.df$predy
cal.df.gather <- gather(data=cal.df, key="Type", value="Predicted_Probability",  calibrated.orig,
calibrated.corrected)
plot1+
geom_line(data= cal.df.gather,   aes(x=predy, y=Predicted_Probability, col = Type), size=1.1)+
geom_rug(data=cal.attr.df, mapping = aes(x= predy), stat = "identity",
position = "identity",alpha=0.2, sides = "t") +
scale_shape_discrete(name=" ")+
scale_color_discrete(name=" ",
breaks= c("calibrated.orig", "calibrated.corrected"),
labels= c("Apparent", "Bias-corrected"))
plot2+
geom_line(data= cal.df.gather,   aes(x=predy, y=Predicted_Probability, col = Type), size=1.1)+
geom_rug(data=cal.attr.df, mapping = aes(x= predy), stat = "identity",
position = "identity",alpha=0.2, sides = "t") +
scale_shape_discrete(name=" ")+
scale_color_discrete(name=" ",
breaks= c("calibrated.orig", "calibrated.corrected"),
labels= c("Apparent", "Bias-corrected"))
plot_calibration_c <-   function (data1, cOutcome, predRisk, groups, rangeaxis, plottitle,
xlabel, ylabel, filename, fileplot, plottype, span=0.8
)
{
if (missing(groups)) {
groups <- 10
}
#if (missing(plottitle)) {
# plottitle <- "Calibration Plot"
#}
if (missing(xlabel)) {
xlabel <- "Predicted Probability"
}
if (missing(ylabel)) {
ylabel <- "Observed Probability"
}
if (missing(rangeaxis)) {
rangeaxis <- c(0, 1)
}
p = predRisk
y = data1[, cOutcome]
if (length(unique(y)) != 2) {
stop(" The specified outcome is not a binary variable.\n")
}
else {
matres <- matrix(NA, nrow = groups, ncol = 5)
sor <- order(p)
p <- p[sor]
y <- y[sor]
groep <- cut2(p, g = groups)
total <- tapply(y, groep, length)
predicted <- round(tapply(p, groep, sum), 3)
observed <- tapply(y, groep, sum)
meanpred <- round(tapply(p, groep, mean), 3)
meanobs <- round(tapply(y, groep, mean), 3)
matres <- cbind(total, meanpred, meanobs, predicted,
observed
#bias= ifelse(meanpred>meanobs, "overestimated", "underestimated")
)
matres <- as.data.frame(matres)
matres <- mutate(matres, bias= ifelse(meanpred>meanobs, "overestimated", "underestimated"))
matres <- mutate(matres, Type= paste("Grouped observations\n(", groups, " groups)"))
#matres[bias] <- factor(matres[,bias], levels = c("overestimated", "underestimated"))
plotc <-  ggplot(data =matres )+ # geom_smooth(aes(x= meanpred, y=meanobs), span= span)+
geom_point(aes(x= meanpred, y=meanobs, shape= Type #,col=bias
)
)+
xlab(xlabel)+ylab(ylabel) +annotate("segment", x=0, xend = 1, y=0, yend=1)+
xlim(c(0,1))+ylim(c(0,1)) + theme_pubr(base_size = 10)+ grids(axis = "xy")
}
return(plotc)
}
plot2.imp <- plot.mypaper(model2.imp)
plot2.imp
head(cal.attr$predicted)
plot(cal.attr$predicted)
cal.attr.df$predy=cal.attr$predicted
plot(cal.attr$predicted)
plot1+
geom_line(data= cal.df.gather,   aes(x=predy, y=Predicted_Probability, col = Type), size=1.1)+
geom_rug(data=cal.attr.df,  aes(x= predy), stat = "identity",
position = "identity",alpha=0.2, sides = "t") +
scale_shape_discrete(name=" ")+
scale_color_discrete(name=" ",
breaks= c("calibrated.orig", "calibrated.corrected"),
labels= c("Apparent", "Bias-corrected"))
plot.mypaper <- function(x ,testdata=NULL , correct=T, ...
# must.have.var=c("firstrses_standardized")
)
{
corrected.c <- NULL
predicted_pro_2 <- NULL
if(is.null(testdata)){
data1=x$data
predicted <- predicted.mypaper(x)
print("internal validation and calibration")
}else{
data1=testdata
predicted <- predicted.mypaper(x, testdata = testdata, correct=correct)
print("external validation and calibration of testdata with prevalence correction")
}
model <- x$model$GLM
model.lrm <-  x$model$LRM
y <- predicted$Observed
p <- predicted$Predicted
dep_var <- x$dep_var
data1<-mutate(data1, dep_var_0 = y)
# specify range of x-axis and y-axis
rangeaxis <- c(0,1)
# specify number of groups for Hosmer-Lemeshow test
groups=x$group
cOutcome <- match(as.character(quote(dep_var_0)), names(data1))
# Calibration plot#
plot1 <-  plot_calibration_c(data1=data1, plottitle = plottitle,#%>%filter(!is.na(q5_a)), #  如果model_1含q5_a, 要把dataset_selected 中q5_a==NA去掉
#  因為model也去掉了q5_a==NA...
cOutcome=cOutcome,  # firstyrbully_1or0 是 dataset_selected[,3]
predRisk=p,
groups=x$group, rangeaxis=rangeaxis, span=x$span
)
if(validate.boot40 ){
# bootstrap-corrected calibration
cal <- calibrate(model.lrm , #predy = c(seq(0, 1, by = 0.01)),
method="boot", B=x$val.B) # usually B=200 or 300
cal.attr <- attributes(cal)
cal.attr.df <- data.frame(predy=cal.attr$predicted)
cal.df <- as.data.frame( unclass(cal))
cal.df$ideal <-cal.df$predy
cal.df.gather <- gather(data=cal.df, key="Type", value="Predicted_Probability",  calibrated.orig,
calibrated.corrected)
###
plota <- plot1+
geom_line(data= cal.df.gather,   aes(x=predy, y=Predicted_Probability, col = Type), size=1.1)+
geom_rug(data=cal.attr.df,  aes(x= predy), stat = "identity",
position = "identity",alpha=0.2, sides = "t") +
scale_shape_discrete(name=" ")+
scale_color_discrete(name=" ",
breaks= c("calibrated.orig", "calibrated.corrected"),
labels= c("Apparent", "Bias-corrected"))
}
# calibration.auc <<- list(calibration.auc, optimism.corrected.c=corrected.c)
return(plota)
}
plot2.imp <- plot.mypaper(model2.imp)
plot2.imp
plot.mypaper <- function(x ,testdata=NULL , correct=T, ...
# must.have.var=c("firstrses_standardized")
)
{
corrected.c <- NULL
predicted_pro_2 <- NULL
if(is.null(testdata)){
data1=x$data
predicted <- predicted.mypaper(x)
print("internal validation and calibration")
}else{
data1=testdata
predicted <- predicted.mypaper(x, testdata = testdata, correct=correct)
print("external validation and calibration of testdata with prevalence correction")
}
model <- x$model$GLM
model.lrm <-  x$model$LRM
y <- predicted$Observed
p <- predicted$Predicted
dep_var <- x$dep_var
data1<-mutate(data1, dep_var_0 = y)
# specify range of x-axis and y-axis
rangeaxis <- c(0,1)
# specify number of groups for Hosmer-Lemeshow test
groups=x$group
cOutcome <- match(as.character(quote(dep_var_0)), names(data1))
# Calibration plot#
plot1 <-  plot_calibration_c(data1=data1, plottitle = plottitle,#%>%filter(!is.na(q5_a)), #  如果model_1含q5_a, 要把dataset_selected 中q5_a==NA去掉
#  因為model也去掉了q5_a==NA...
cOutcome=cOutcome,  # firstyrbully_1or0 是 dataset_selected[,3]
predRisk=p,
groups=x$group, rangeaxis=rangeaxis, span=x$span
)
if(validate.boot40 ){
cal<- NULL
# bootstrap-corrected calibration
cal <- calibrate(model.lrm , #predy = c(seq(0, 1, by = 0.01)),
method="boot", B=x$val.B) # usually B=200 or 300
cal.attr <- attributes(cal)
cal.attr.df <- data.frame(predy=cal.attr$predicted)
cal.df <- as.data.frame( unclass(cal))
cal.df$ideal <-cal.df$predy
cal.df.gather <- gather(data=cal.df, key="Type", value="Predicted_Probability",  calibrated.orig,
calibrated.corrected)
###
plota <- plot1+
geom_line(data= cal.df.gather,   aes(x=predy, y=Predicted_Probability, col = Type), size=1.1)+
geom_rug(data=cal.attr.df,  aes(x= predy), stat = "identity",
position = "identity",alpha=0.2, sides = "t") +
scale_shape_discrete(name=" ")+
scale_color_discrete(name=" ",
breaks= c("calibrated.orig", "calibrated.corrected"),
labels= c("Apparent", "Bias-corrected"))
}
# calibration.auc <<- list(calibration.auc, optimism.corrected.c=corrected.c)
return(plota)
}
plot2.imp <- plot.mypaper(model2.imp)
plot2.imp
plot2 <- plot(model2)
plot2
## predicting models: model and model 2.  missing data: excluded
set.seed(125)
span=0.8
group= 20
validate.boot40= F
val.B= 40
confusion.matrix= T
p.threshhold= 0.05
imputation=F
cut.off=0.5
correct= F
rec_b1_arg <- list(ind_var=vars_vector_victim, dep_var = "rec_bully_firstyr", additional_var= NULL, data= dataset,
imputation.mis.data=imputation,
span=span, group=group,
validate.boot40= validate.boot40,
val.B=val.B,
confusion.matrix= confusion.matrix,
cut.off=cut.off,
p.threshhold= p.threshhold,
correct= correct)
model2 <-  do.call(mypaper,rec_b1_arg)
plot2 <- plot(model2)
plot.mypaper <- function(x ,testdata=NULL , correct=T, ...
# must.have.var=c("firstrses_standardized")
)
{
corrected.c <- NULL
predicted_pro_2 <- NULL
if(is.null(testdata)){
data1=x$data
predicted <- predicted.mypaper(x)
print("internal validation and calibration")
}else{
data1=testdata
predicted <- predicted.mypaper(x, testdata = testdata, correct=correct)
print("external validation and calibration of testdata with prevalence correction")
}
model <- x$model$GLM
model.lrm <-  x$model$LRM
y <- predicted$Observed
p <- predicted$Predicted
dep_var <- x$dep_var
data1<-mutate(data1, dep_var_0 = y)
# specify range of x-axis and y-axis
rangeaxis <- c(0,1)
# specify number of groups for Hosmer-Lemeshow test
groups=x$group
cOutcome <- match(as.character(quote(dep_var_0)), names(data1))
# Calibration plot#
plot1 <-  plot_calibration_c(data1=data1, plottitle = plottitle,#%>%filter(!is.na(q5_a)), #  如果model_1含q5_a, 要把dataset_selected 中q5_a==NA去掉
#  因為model也去掉了q5_a==NA...
cOutcome=cOutcome,  # firstyrbully_1or0 是 dataset_selected[,3]
predRisk=p,
groups=x$group, rangeaxis=rangeaxis, span=x$span
)
if(validate.boot40 ){
cal<- NULL
# bootstrap-corrected calibration
cal <- calibrate(model.lrm , #predy = c(seq(0, 1, by = 0.01)),
method="boot", B=x$val.B) # usually B=200 or 300
cal.attr <- attributes(cal)
cal.attr.df <- data.frame(predy=cal.attr$predicted)
cal.df <- as.data.frame( unclass(cal))
cal.df$ideal <-cal.df$predy
cal.df.gather <- gather(data=cal.df, key="Type", value="Predicted_Probability",  calibrated.orig,
calibrated.corrected)
###
plot1 <- plot1+
geom_line(data= cal.df.gather,   aes(x=predy, y=Predicted_Probability, col = Type), size=1.1)+
geom_rug(data=cal.attr.df,  aes(x= predy), stat = "identity",
position = "identity",alpha=0.2, sides = "t") +
scale_shape_discrete(name=" ")+
scale_color_discrete(name=" ",
breaks= c("calibrated.orig", "calibrated.corrected"),
labels= c("Apparent", "Bias-corrected"))
}
# calibration.auc <<- list(calibration.auc, optimism.corrected.c=corrected.c)
return(plot1)
}
plot2 <- plot(model2)
plot2
plot2+
geom_line(data= cal.df.gather,   aes(x=predy, y=Predicted_Probability, col = Type), size=1.1)+
geom_rug(data=cal.attr.df,  aes(x= predy), stat = "identity",
position = "identity",alpha=0.2, sides = "t") +
scale_shape_discrete(name=" ")+
scale_color_discrete(name=" ",
breaks= c("calibrated.orig", "calibrated.corrected"),
labels= c("Apparent", "Bias-corrected"))
model.lrm <- model2.imp$model$LRM
cal <- calibrate(model.lrm , #predy = c(seq(0, 1, by = 0.01)),
method="boot", B=100) # usually B=200 or 300
cal.attr <- attributes(cal)
cal.attr.df <- data.frame(predy=cal.attr$predicted)
cal.df <- as.data.frame( unclass(cal))
cal.df$ideal <-cal.df$predy
cal.df.gather <- gather(data=cal.df, key="Type", value="Predicted_Probability",  calibrated.orig,
calibrated.corrected)
plot2+
geom_line(data= cal.df.gather,   aes(x=predy, y=Predicted_Probability, col = Type), size=1.1)+
geom_rug(data=cal.attr.df,  aes(x= predy), stat = "identity",
position = "identity",alpha=0.2, sides = "t") +
scale_shape_discrete(name=" ")+
scale_color_discrete(name=" ",
breaks= c("calibrated.orig", "calibrated.corrected"),
labels= c("Apparent", "Bias-corrected"))
model.lrm <- model2.imp$model$model.formula
model2.imp$model$model.formula
model.lrm <- model2.imp$model$LRM
cal <- calibrate(model.lrm , #predy = c(seq(0, 1, by = 0.01)),
method="boot", B=40) # usually B=200 or 300
cal.attr <- attributes(cal)
cal.attr.df <- data.frame(predy=cal.attr$predicted)
cal.df <- as.data.frame( unclass(cal))
cal.df$ideal <-cal.df$predy
cal.df.gather <- gather(data=cal.df, key="Type", value="Predicted_Probability",  calibrated.orig,
calibrated.corrected)
plot2+
geom_line(data= cal.df.gather,   aes(x=predy, y=Predicted_Probability, col = Type), size=1.1)+
geom_rug(data=cal.attr.df,  aes(x= predy), stat = "identity",
position = "identity",alpha=0.2, sides = "t") +
scale_shape_discrete(name=" ")+
scale_color_discrete(name=" ",
breaks= c("calibrated.orig", "calibrated.corrected"),
labels= c("Apparent", "Bias-corrected"))
cal.df <- as.data.frame( unclass(cal_rec))
cal.df$ideal <-cal.df$predy
cal.df.gather <- gather(data=cal.df, key="Type", value="Predicted_Probability",  calibrated.orig,
calibrated.corrected)
plot2+
geom_line(data= cal.df.gather,   aes(x=predy, y=Predicted_Probability, col = Type), size=1.1)+
geom_rug(data=cal.attr.df,  aes(x= predy), stat = "identity",
position = "identity",alpha=0.2, sides = "t") +
scale_shape_discrete(name=" ")+
scale_color_discrete(name=" ",
breaks= c("calibrated.orig", "calibrated.corrected"),
labels= c("Apparent", "Bias-corrected"))
cal<- NULL
# bootstrap-corrected calibration
cal <- rms::calibrate(model.lrm , #predy = c(seq(0, 1, by = 0.01)),
method="boot", B=x$val.B) # usually B=200 or 300
cal.attr <- attributes(cal)
cal.attr.df <- data.frame(predy=cal.attr$predicted)
cal.df <- as.data.frame( unclass(cal))
cal.df$ideal <-cal.df$predy
cal.df.gather <- gather(data=cal.df, key="Type", value="Predicted_Probability",  calibrated.orig,
calibrated.corrected)
rms::cacal<- NULL
# bootstrap-corrected calibration
cal <- rms::calibrate(model.lrm , #predy = c(seq(0, 1, by = 0.01)),
method="boot", B=40) # usually B=200 or 300
cal.attr <- attributes(cal)
cal.attr.df <- data.frame(predy=cal.attr$predicted)
cal.df <- as.data.frame( unclass(cal))
cal.df$ideal <-cal.df$predy
cal.df.gather <- gather(data=cal.df, key="Type", value="Predicted_Probability",  calibrated.orig,
calibrated.corrected)
plot2+
geom_line(data= cal.df.gather,   aes(x=predy, y=Predicted_Probability, col = Type), size=1.1)+
geom_rug(data=cal.attr.df,  aes(x= predy), stat = "identity",
position = "identity",alpha=0.2, sides = "t") +
scale_shape_discrete(name=" ")+
scale_color_discrete(name=" ",
breaks= c("calibrated.orig", "calibrated.corrected"),
labels= c("Apparent", "Bias-corrected"))
View(cal.df)
View(cal.df.gather)
View(cal.attr)
